do not work correct


import sounddevice as sd
import queue
import json
import re
import os
import platform
import subprocess
import tempfile
from vosk import Model, KaldiRecognizer
from TTS.api import TTS
from datetime import datetime
import sounddevice as sd

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
MODEL_DIR = "d:/_GitHub/python_prj/voice-work/models/"
VOSK_MODEL_PATH = f"{MODEL_DIR}/vosk-model-small-ru-0.22"
TTS_MODEL_PATH = f"{MODEL_DIR}/tts_models--multilingual--multi-dataset--xtts_v2"


print("MODEL_DIR       = ", MODEL_DIR)
print("VOSK_MODEL_PATH = ", VOSK_MODEL_PATH)
print("TTS_MODEL_PATH  = ", TTS_MODEL_PATH)
print("config.json     = ", f"{TTS_MODEL_PATH}/config.json")


SAMPLE_RATE = 16000
q = queue.Queue()

# === –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π ===
print("üîÅ –ó–∞–≥—Ä—É–∑–∫–∞ TTS...")
tts = TTS(model_path=TTS_MODEL_PATH, config_path=f"{TTS_MODEL_PATH}/config.json")

print("üîÅ –ó–∞–≥—Ä—É–∑–∫–∞ Vosk...")
asr_model = Model(VOSK_MODEL_PATH)
recognizer = KaldiRecognizer(asr_model, SAMPLE_RATE)


# === –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ WAV ===
def play_audio(file_path):
    system = platform.system()
    if system == "Windows":
        os.startfile(file_path)
    elif system == "Darwin":
        subprocess.call(["afplay", file_path])
    else:
        subprocess.call(["aplay", file_path])

# === –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ ===
def speak(text):
    with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as fp:
        #tts.tts_to_file(text=text, file_path=fp.name)
         wav = tts.tts(text=text,
                file_path=fp.name,
                speaker="Ana Florence",
                language="ru",
                split_sentences=True
                )

        print(type(wav))  # –æ—Ç–ª–∞–¥–∫–∞

        #wav_np = wav.squeeze().cpu().numpy()  # ‚Üí numpy array for sounddevice
        #sd.play(wav_np, samplerate=24000)
        #sd.wait()  # –¥–æ–∂–¥–∞—Ç—å—Å—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è


        #play_audio(fp.name)
        #os.unlink(fp.name)

# === –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–æ–º ===
def handle_command(text):
    print(f"üì• –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}")

    if "–ø—Ä–∏–≤–µ—Ç" in text:
        return "–ü—Ä–∏–≤–µ—Ç, —è —Ä–æ–±–æ—Ç!"
    if "–≤–ø–µ—Ä—ë–¥" in text:
        match = re.search(r"–≤–ø–µ—Ä—ë–¥\s*(\d*)", text)
        duration = match.group(1) if match else "1"
        return f"–î–≤–∏–≥–∞—é—Å—å –≤–ø–µ—Ä—ë–¥ {duration} —Å–µ–∫—É–Ω–¥."
    if "–Ω–∞–∑–∞–¥" in text:
        match = re.search(r"–Ω–∞–∑–∞–¥\s*(\d*)", text)
        duration = match.group(1) if match else "1"
        return f"–î–≤–∏–≥–∞—é—Å—å –Ω–∞–∑–∞–¥ {duration} —Å–µ–∫—É–Ω–¥."
    if "–ø–æ–≤–æ—Ä–æ—Ç –Ω–∞–ø—Ä–∞–≤–æ" in text:
        return "–ü–æ–≤–æ—Ä–∞—á–∏–≤–∞—é –Ω–∞–ø—Ä–∞–≤–æ."
    if "–ø–æ–≤–æ—Ä–æ—Ç –Ω–∞–ª–µ–≤–æ" in text:
        return "–ü–æ–≤–æ—Ä–∞—á–∏–≤–∞—é –Ω–∞–ª–µ–≤–æ."
    if "—Å—Ç–æ–ø" in text:
        return "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Å—å."
    if "–≤—Ä–µ–º—è" in text:
        return f"–°–µ–π—á–∞—Å {datetime.now().strftime('%H:%M')}."
    
    return "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞."

# === Callback –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫–∞ ===
def audio_callback(indata, frames, time, status):
    if status:
        print(status)
    q.put(bytes(indata))

# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è ===
def run_voice_interface():
    print("üéôÔ∏è –°–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É...")
    speak("–°–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É")
    with sd.RawInputStream(samplerate=SAMPLE_RATE, blocksize=8000, dtype='int16',
                           channels=1, callback=audio_callback):
        while True:
            data = q.get()
            if recognizer.AcceptWaveform(data):
                result = json.loads(recognizer.Result())
                text = result.get("text", "")
                if text:
                    response = handle_command(text)
                    print(f"ü§ñ –û—Ç–≤–µ—Ç: {response}")
                    speak(response)

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    run_voice_interface()
import os
import tempfile
import platform
import subprocess

import queue
import json

from vosk import Model as STTModel, KaldiRecognizer
from vosk_tts import Model as TTSModel, Synth
import torchaudio
import sounddevice as sd
from datetime import datetime
import re
from num2words import num2words
import random

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
MODEL_DIR = "d:/_GitHub/python_prj/voice-work/models/"
VOSK_MODEL_PATH = f"{MODEL_DIR}/vosk-model-small-ru-0.22"
TTS_MODEL_PATH = f"{MODEL_DIR}/vosk-model-tts-ru-0.9-multi"


print("MODEL_DIR       = ", MODEL_DIR)
print("VOSK_MODEL_PATH = ", VOSK_MODEL_PATH)
print("TTS_MODEL_PATH  = ", TTS_MODEL_PATH)



SAMPLE_RATE = 16000
AUDIO_DEVICE = None
q = queue.Queue()

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π ===
print("–ó–∞–≥—Ä—É–∑–∫–∞ Vosk –º–æ–¥–µ–ª–∏...")
asr_model = STTModel(VOSK_MODEL_PATH)
recognizer = KaldiRecognizer(asr_model, SAMPLE_RATE)

print("–ó–∞–≥—Ä—É–∑–∫–∞ TTS –º–æ–¥–µ–ª–∏...")
model = TTSModel(model_path=TTS_MODEL_PATH, lang="ru")
synth = Synth(model)

stream = None  # –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫

# === –û–∑–≤—É—á–∫–∞ —á–µ—Ä–µ–∑ vosk-tts ===
def speak(text):
    global stream
    if stream:
        stream.stop()  # ‚è∏Ô∏è –æ—Ç–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω

    print("üó£Ô∏è –û–∑–≤—É—á–∫–∞:", text)
    wav = synth.synth_audio(text, speaker_id=0)
    wav_np = wav.squeeze()
    sd.play(wav_np, samplerate=24000)
    sd.wait()  # –¥–æ–∂–¥–∞—Ç—å—Å—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è

    if stream:
        stream.start()  # ‚ñ∂Ô∏è –≤–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ ===
def handle_command(text):
    text = text.lower()

    if any(word in text for word in ["—Ç—É–ø–æ–π", "—Ç—É–ø–∞—è", "–ø–∏–ø–µ—Ü"]):
        phrases = [
            "–°–∞–º —Ç–∞–∫–æ–π!", 
            "–ü–∞—Ä–Ω–∏—à–∞ –Ω–µ –≥—Ä—É–±–∏—Ç–µ", 
            "–î–∞ –ø–æ—à–æ–ª —Ç—ã!" ]
        return random.choice(phrases)

    if any(word in text for word in ["—Å–∫–∞–∂–∏", "—Ä–∞—Å—Å–∫–∞–∂–∏", "–≥–æ–≤–æ—Ä–∏"]):
        phrases = [
            "–•–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π.",
            "–î–∞–π —Å–∏–≥–æ—Ä–µ—Ç–∫—É!",
            "–ù–∞–ª–∏–≤–∞–π.",
        ]
        return random.choice(phrases)

    # === –°–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç (—Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Ñ—Ä–∞–∑–æ–π –ø–æ—Å–ª–µ) ===
    match = re.search(r"(–ø—Ä–æ–∏–∑–Ω–µ—Å–∏|–æ–∑–≤—É—á—å)\s+(—Ç–µ–∫—Å—Ç|—Ñ—Ä–∞–∑—É)\s+(.+)", text)
    if match:
        spoken_text = match.group(3).strip()
        return spoken_text

    if any(word in text for word in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å"]):
        return "–ü—Ä–∏–≤–µ—Ç, —è —Ç–µ–±—è —Å–ª—É—à–∞—é!"

    if any(word in text for word in ["–≤–ø–µ—Ä—ë–¥", "–ø–æ–µ—Ö–∞–ª–∏", "–¥–≤–∏–≥–∞–π—Å—è", "–¥–≤–∏–∂–µ–Ω–∏–µ"]):
        #m = re.search(r"(–≤–ø–µ—Ä—ë–¥|–ø–æ–µ—Ö–∞–ª–∏|–¥–≤–∏–≥–∞–π—Å—è|–¥–≤–∏–∂–µ–Ω–∏–µ)\s*(\d*)", text)
        #sec = m.group(2) if m and m.group(2) else "1"
        #sec_ = num2words(sec, lang="ru")
        #return f"–î–≤–∏–≥–∞—é—Å—å –≤–ø–µ—Ä—ë–¥ {sec_} —Å–µ–∫—É–Ω–¥."
        return f"–î–≤–∏–≥–∞—é—Å—å –≤–ø–µ—Ä—ë–¥."

    if any(word in text for word in ["–Ω–∞–∑–∞–¥", "–æ—Ç—ä–µ–¥—å", "–æ–±—Ä–∞—Ç–Ω–æ"]):
        #m = re.search(r"(–Ω–∞–∑–∞–¥|–æ—Ç—ä–µ–¥—å|–æ–±—Ä–∞—Ç–Ω–æ)\s*(\d*)", text)
        #sec = m.group(2) if m and m.group(2) else "1"
        #sec_ = num2words(sec, lang="ru")
        #return f"–î–≤–∏–≥–∞—é—Å—å –Ω–∞–∑–∞–¥ {sec_} —Å–µ–∫—É–Ω–¥."
        return f"–î–≤–∏–≥–∞—é—Å—å –Ω–∞–∑–∞–¥"

    if any(word in text for word in ["–Ω–∞–ª–µ–≤–æ", "–≤–ª–µ–≤–æ", "–ª–µ–≤–æ"]):
        return "–ü–æ–≤–æ—Ä–∞—á–∏–≤–∞—é –Ω–∞–ª–µ–≤–æ."

    if any(word in text for word in ["–Ω–∞–ø—Ä–∞–≤–æ", "–≤–ø—Ä–∞–≤–æ", "–ø—Ä–∞–≤–æ"]):
        return "–ü–æ–≤–æ—Ä–∞—á–∏–≤–∞—é –Ω–∞–ø—Ä–∞–≤–æ."

    if any(word in text for word in ["—Å—Ç–æ–ø", "–æ—Å—Ç–∞–Ω–æ–≤–∏—Å—å", "—Ö–≤–∞—Ç–∏—Ç", "–ø—Ä–µ–∫—Ä–∞—Ç–∏", "—Å—Ç–æ–π"]):
        return "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Å—å."

    if "–≤—Ä–µ–º—è" in text:
        return f"–°–µ–π—á–∞—Å {datetime.now().strftime('%H:%M')}."

    return "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞."



# === –ê—É–¥–∏–æ –ø–æ—Ç–æ–∫ ===
def callback(indata, frames, time, status):
    if status:
        print(status)
    q.put(bytes(indata))

# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ===
def run():
    global stream

    print("üé§ –°–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É...")
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫, –Ω–æ –Ω–µ –≤ with ‚Äî –Ω—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é —É–ø—Ä–∞–≤–ª—è—Ç—å
    stream = sd.RawInputStream(samplerate=16000, blocksize=8000, dtype='int16',
                               channels=1, callback=callback)
    stream.start()
    while True:
        data = q.get()
        if recognizer.AcceptWaveform(data):
            result = json.loads(recognizer.Result())
            text = result.get("text", "")
            if text:
                print("–í—ã —Å–∫–∞–∑–∞–ª–∏:", text)
                reply = handle_command(text)
                speak(reply)

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    run()